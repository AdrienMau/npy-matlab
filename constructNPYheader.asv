


function header = constructNPYheader(dataType, shape)

    fortranOrder = true;
    littleEndian = true;

    dtypesMatlab = {'uint8','uint16','uint32','uint64','int8','int16','int32','int64','single','double'};
    dtypesNPY = {'u1', 'u2', 'u4', 'u8', 'i1', 'i2', 'i4', 'i8', 'f4', 'f8'};

    magicString = uint8([  147
   78
   85
   77
   80
   89]);
    
    majorVersion = uint8(1);
    minorVersion = uint8(0);

    % build the dict specifying data type, array order, endianness, and
    % shape
    dictString = '{''descr'': ''';
    
    if littleEndian
        dictString = [dictString '<'];
    else
        dictString = [dictString '>'];
    end
    
    thisDType = find(strcmp(dtypesMatlab,dataType));
    dictString = [dictString dtypesNPY{thisDType} ''', '];
    
    dictString = [dictString '''fortran_order'': '];
    
    if fortranOrder
        dictString = [dictString 'True, '];
    else
        dictString = [dictString 'False, '];
    end
    
    dictString = [dictString '''shape'': ('];
    
    if length(shape)==1 && shape==1
        
    else
        for s = 1:length(shape)
            dictString = [dictString num2str(shape(s))];
            if length(shape)>1 && s<length(shape)
                dictString = [dictString ', '];
            end            
        end
        if length(shape)==1
            dictString = [dictString ','];
        end
    end
    
    dictString = [dictString '), '];
    
    dictString = [dictString '}'];
    
    totalHeaderLength = length(dictString)+10; % 10 is length of magicString, version, and headerLength
    
    headerLengthPadded = ceil(double(totalHeaderLength)/16)*16; % the whole thing should be a multiple of 16
    headerLength = typecast(int16(headerLengthPadded-10), 'uint8');
    zeroPad = zeros(1,headerLengthPadded-totalHeaderLength, 'uint8');
    
    header = [magicString majorVersion minorVersion headerLength dictString zeroPad];

end