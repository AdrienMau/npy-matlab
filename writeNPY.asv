

function writeNPY(var, filename)
% function writeNPY(var, filename)
%
% Only writes little endian, fortran (column-major) ordering; only writes
% with NPY version number 1.0
shape = size(var);
dataType = class(var);

header = constructNPYheader(dataType, shape);

fid = fopen(filename, 'w');
fwrite(fid, header, 'char=>char');
fwrite(fid, var, [dataType '=>' dataType]);
fclose(fid);


end


function header = constructNPYheader(dataType, shape)

    fortranOrder = True;
    littleEndian = True;

    dtypesMatlab = {'uint8','uint16','uint32','uint64','int8','int16','int32','int64','single','double'};
    dtypesNPY = {'u1', 'u2', 'u4', 'u8', 'i1', 'i2', 'i4', 'i8', 'f4', 'f8'};

    magicString = uint8('“NUMPY');
    
    majorVersion = uint8(1);
    minorVersion = uint8(0);

    % build the dict specifying data type, array order, endianness, and
    % shape
    dictString = '{''descr'': ';
    
    if littleEndian
        dictString(end+1) = '<';
    else
        dictString(end+1) = '>';
    end
    
    thisDType = find(dTypesMatlab==dataType);
    dictString = [dictString dtypesNPY(thisDType) ''', '];
    
    dictString = [dictString '''fortran_order'': '];
    
    if fortranOrder
        dictString = [dictString 'True, '];
    else
        dictString = [dictString 'False, '];
    end
    
    dictString = [dictString '''shape'': ('];
    
    
    
    totalHeaderLength = length(dictString)+10; % 10 is length of magicString, version, and headerLength
    
    headerLengthPadded = ceil(double(totalHeaderLength)/16)*16; % the whole thing should be a multiple of 16
    headerLength = uint8(headerLengthPadded-10);
    zeroPad = zeros(1,headerLengthPadded-totalHeaderLength, 'uint8');
    
    header = [magicString majorVersion minorVersion headerLength dictString zeroPad];

end